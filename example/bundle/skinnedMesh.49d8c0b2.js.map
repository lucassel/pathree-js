{"mappings":"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","sources":["example/skinnedMesh.js","example/utils/generateRadialFloorTexture.js"],"sourcesContent":["import * as THREE from 'three';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { DynamicPathTracingSceneGenerator, PathTracingRenderer, PhysicalPathTracingMaterial, BlurredEnvMapGenerator } from '../src/index.js';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js';\nimport { MeshoptDecoder } from 'three/examples/jsm/libs/meshopt_decoder.module.js';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport { generateRadialFloorTexture } from './utils/generateRadialFloorTexture.js';\n\nlet renderer, controls, sceneInfo, ptRenderer, camera, fsQuad, scene, clock, model;\nlet samplesEl;\nlet counter = 0;\nconst params = {\n\n\tenvironmentIntensity: 1,\n\tbounces: 3,\n\tsamplesPerFrame: 1,\n\tresolutionScale: 1 / window.devicePixelRatio,\n\ttiles: 1,\n\tautoPause: true,\n\tpause: false,\n\tcontinuous: false,\n\n};\n\n// clamp value for mobile\nconst aspectRatio = window.innerWidth / window.innerHeight;\nif ( aspectRatio < 0.65 ) {\n\n\tparams.resolutionScale *= 0.5;\n\tparams.tiles = 2;\n\n}\n\ninit();\n\nasync function init() {\n\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.toneMapping = THREE.ACESFilmicToneMapping;\n\trenderer.outputEncoding = THREE.sRGBEncoding;\n\tdocument.body.appendChild( renderer.domElement );\n\n\tscene = new THREE.Scene();\n\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.025, 500 );\n\tcamera.position.set( 5.5, 3.5, 7.5 );\n\n\tptRenderer = new PathTracingRenderer( renderer );\n\tptRenderer.camera = camera;\n\tptRenderer.material = new PhysicalPathTracingMaterial();\n\tptRenderer.material.filterGlossyFactor = 0.25;\n\tptRenderer.material.setDefine( 'FEATURE_MIS', 0 );\n\tptRenderer.tiles.set( params.tiles, params.tiles );\n\n\tfsQuad = new FullScreenQuad( new THREE.MeshBasicMaterial( {\n\t\tmap: ptRenderer.target.texture,\n\t\ttransparent: true,\n\t} ) );\n\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\tcontrols.target.set( - 0.15, 2, - 0.08 );\n\tcamera.lookAt( controls.target );\n\tcontrols.addEventListener( 'change', () => {\n\n\t\tptRenderer.reset();\n\n\t} );\n\tcontrols.update();\n\n\tsamplesEl = document.getElementById( 'samples' );\n\n\tclock = new THREE.Clock();\n\n\tconst envMapPromise = new Promise( resolve => {\n\n\t\tnew RGBELoader()\n\t\t\t.load( 'https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/equirectangular/royal_esplanade_1k.hdr', texture => {\n\n\t\t\t\tconst generator = new BlurredEnvMapGenerator( renderer );\n\t\t\t\tconst blurredTex = generator.generate( texture, 0.35 );\n\t\t\t\tptRenderer.material.envMapInfo.updateFrom( blurredTex );\n\t\t\t\tgenerator.dispose();\n\n\t\t\t\tscene.background = blurredTex;\n\t\t\t\tscene.environment = blurredTex;\n\n\t\t\t\tresolve();\n\n\t\t\t} );\n\n\t} );\n\n\tif ( window.location.hash === '#morphtarget' ) {\n\n\t\tmodel = await loadModel( 'https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/models/gltf/RobotExpressive/RobotExpressive.glb' );\n\n\t} else {\n\n\t\tmodel = await loadModel( 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/main/models/trex/scene.gltf' );\n\n\t}\n\n\t// model = await loadModel( 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/main/models/pigman/scene.gltf' );\n\tscene.add( model.scene );\n\n\tawait envMapPromise;\n\n\tdocument.getElementById( 'loading' ).remove();\n\n\tonResize();\n\twindow.addEventListener( 'resize', onResize );\n\n\tconst gui = new GUI();\n\tgui.add( params, 'tiles', 1, 4, 1 ).onChange( value => {\n\n\t\tptRenderer.tiles.set( value, value );\n\n\t} );\n\tgui.add( params, 'samplesPerFrame', 1, 10, 1 );\n\tgui.add( params, 'environmentIntensity', 0, 10 ).onChange( () => {\n\n\t\tptRenderer.reset();\n\n\t} );\n\tgui.add( params, 'bounces', 1, 5, 1 ).onChange( () => {\n\n\t\tptRenderer.reset();\n\n\t} );\n\tgui.add( params, 'resolutionScale', 0.1, 1 ).onChange( () => {\n\n\t\tonResize();\n\n\t} );\n\tgui.add( params, 'autoPause' ).listen();\n\tgui.add( params, 'pause' ).onChange( v => {\n\n\t\tparams.autoPause = false;\n\t\tsetPause( v );\n\n\t} ).listen();\n\tgui.add( params, 'continuous' ).onChange( () => {\n\n\t\tparams.autoPause = false;\n\n\t} );\n\n\tanimate();\n\n}\n\nfunction setPause( v ) {\n\n\tmodel.action.paused = v;\n\tparams.pause = v;\n\tif ( v ) {\n\n\t\tregenerateScene();\n\n\t}\n\n}\n\nfunction loadModel( url ) {\n\n\tconst gltfPromise = new GLTFLoader()\n\t\t.setMeshoptDecoder( MeshoptDecoder )\n\t\t.loadAsync( url )\n\t\t.then( gltf => {\n\n\t\t\t// make the model white since the texture seems to dark for the env map\n\t\t\tgltf.scene.traverse( c => {\n\n\t\t\t\tif ( c.material ) {\n\n\t\t\t\t\tc.material.metalness = 0;\n\t\t\t\t\tc.material.map = null;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\t// animations\n\t\t\tconst animations = gltf.animations;\n\t\t\tconst mixer = new THREE.AnimationMixer( gltf.scene );\n\n\t\t\tconst action = mixer.clipAction( animations[ 0 ] );\n\t\t\taction.play();\n\t\t\taction.paused = params.pause;\n\n\t\t\t// add floor\n\t\t\tconst group = new THREE.Group();\n\t\t\tgroup.add( gltf.scene );\n\n\t\t\tconst floorTex = generateRadialFloorTexture( 2048 );\n\t\t\tconst floorPlane = new THREE.Mesh(\n\t\t\t\tnew THREE.PlaneBufferGeometry(),\n\t\t\t\tnew THREE.MeshStandardMaterial( {\n\t\t\t\t\tmap: floorTex,\n\t\t\t\t\ttransparent: true,\n\t\t\t\t\tcolor: 0xdddddd,\n\t\t\t\t\troughness: 0.025,\n\t\t\t\t\tmetalness: 1.0\n\t\t\t\t} )\n\t\t\t);\n\t\t\tfloorPlane.scale.setScalar( 50 );\n\t\t\tfloorPlane.rotation.x = - Math.PI / 2;\n\t\t\tfloorPlane.position.y = 0.075;\n\t\t\tgroup.add( floorPlane );\n\n\t\t\t// create the scene generator for updating skinned meshes quickly\n\t\t\tconst sceneGenerator = new DynamicPathTracingSceneGenerator( group );\n\n\t\t\treturn {\n\t\t\t\tscene: group,\n\t\t\t\tsceneGenerator,\n\t\t\t\tmixer,\n\t\t\t\taction,\n\t\t\t};\n\n\t\t} );\n\n\treturn gltfPromise;\n\n}\n\n\nfunction onResize() {\n\n\tconst w = window.innerWidth;\n\tconst h = window.innerHeight;\n\tconst scale = params.resolutionScale;\n\tconst dpr = window.devicePixelRatio;\n\n\tptRenderer.setSize( w * scale * dpr, h * scale * dpr );\n\tptRenderer.reset();\n\n\trenderer.setSize( w, h );\n\trenderer.setPixelRatio( window.devicePixelRatio * scale );\n\tcamera.aspect = w / h;\n\tcamera.updateProjectionMatrix();\n\n}\n\nfunction regenerateScene() {\n\n\tconst { scene, sceneGenerator } = model;\n\tconst result = sceneGenerator.generate( scene );\n\tsceneInfo = result;\n\n\tconst { bvh, textures, materials } = result;\n\tconst geometry = bvh.geometry;\n\tconst material = ptRenderer.material;\n\n\tmaterial.bvh.updateFrom( bvh );\n\tmaterial.normalAttribute.updateFrom( geometry.attributes.normal );\n\tmaterial.tangentAttribute.updateFrom( geometry.attributes.tangent );\n\tmaterial.uvAttribute.updateFrom( geometry.attributes.uv );\n\tmaterial.materialIndexAttribute.updateFrom( geometry.attributes.materialIndex );\n\tmaterial.textures.setTextures( renderer, 2048, 2048, textures );\n\tmaterial.materials.updateFrom( materials, textures );\n\n\tptRenderer.reset();\n\n}\n\nfunction animate() {\n\n\trequestAnimationFrame( animate );\n\n\tconst delta = Math.min( clock.getDelta(), 30 * 0.001 );\n\tmodel.mixer.update( delta );\n\tmodel.scene.updateMatrixWorld();\n\n\tif ( params.autoPause ) {\n\n\t\tcounter += delta;\n\t\tif ( ! params.pause && counter >= 2.5 || params.pause && counter >= 5 ) {\n\n\t\t\tsetPause( ! params.pause );\n\t\t\tcounter = 0;\n\n\t\t}\n\n\t} else {\n\n\t\tcounter = 0;\n\n\t}\n\n\tif ( ! params.pause && ! params.continuous ) {\n\n\t\trenderer.render( scene, camera );\n\n\t} else {\n\n\t\tif ( ! params.pause && params.continuous ) {\n\n\t\t\tregenerateScene();\n\n\t\t}\n\n\t\tptRenderer.material.materials.updateFrom( sceneInfo.materials, sceneInfo.textures );\n\t\tptRenderer.material.environmentIntensity = params.environmentIntensity;\n\t\tptRenderer.material.environmentBlur = 0.35;\n\t\tptRenderer.material.bounces = params.bounces;\n\n\t\tcamera.updateMatrixWorld();\n\n\t\tfor ( let i = 0, l = params.samplesPerFrame; i < l; i ++ ) {\n\n\t\t\tptRenderer.update();\n\n\t\t}\n\n\t\tif ( ptRenderer.samples < 1 ) {\n\n\t\t\trenderer.render( scene, camera );\n\n\t\t}\n\n\t\trenderer.autoClear = false;\n\t\tfsQuad.render( renderer );\n\t\trenderer.autoClear = true;\n\n\t\tsamplesEl.innerText = `Samples: ${ Math.floor( ptRenderer.samples ) }`;\n\n\t}\n\n}\n","import * as THREE from 'three';\n\nexport function generateRadialFloorTexture( dim ) {\n\n\tconst data = new Uint8Array( dim * dim * 4 );\n\n\tfor ( let x = 0; x < dim; x ++ ) {\n\n\t\tfor ( let y = 0; y < dim; y ++ ) {\n\n\t\t\tconst xNorm = x / ( dim - 1 );\n\t\t\tconst yNorm = y / ( dim - 1 );\n\n\t\t\tconst xCent = 2.0 * ( xNorm - 0.5 );\n\t\t\tconst yCent = 2.0 * ( yNorm - 0.5 );\n\t\t\tlet a = Math.max( Math.min( 1.0 - Math.sqrt( xCent ** 2 + yCent ** 2 ), 1.0 ), 0.0 );\n\t\t\ta = a ** 2;\n\t\t\ta = Math.min( a, 1.0 );\n\n\t\t\tconst i = y * dim + x;\n\t\t\tdata[ i * 4 + 0 ] = 255;\n\t\t\tdata[ i * 4 + 1 ] = 255;\n\t\t\tdata[ i * 4 + 2 ] = 255;\n\t\t\tdata[ i * 4 + 3 ] = a * 255;\n\n\t\t}\n\n\t}\n\n\tconst tex = new THREE.DataTexture( data, dim, dim );\n\ttex.format = THREE.RGBAFormat;\n\ttex.type = THREE.UnsignedByteType;\n\ttex.minFilter = THREE.LinearFilter;\n\ttex.magFilter = THREE.LinearFilter;\n\ttex.wrapS = THREE.RepeatWrapping;\n\ttex.wrapT = THREE.RepeatWrapping;\n\ttex.needsUpdate = true;\n\treturn tex;\n\n}\n"],"names":["$ilwiq","parcelRequire","$f06a0a82aa9331ef$var$renderer","$f06a0a82aa9331ef$var$controls","$f06a0a82aa9331ef$var$sceneInfo","$f06a0a82aa9331ef$var$ptRenderer","$f06a0a82aa9331ef$var$camera","$f06a0a82aa9331ef$var$fsQuad","$f06a0a82aa9331ef$var$scene","$f06a0a82aa9331ef$var$clock","$f06a0a82aa9331ef$var$model","$f06a0a82aa9331ef$var$samplesEl","$f06a0a82aa9331ef$var$counter","$f06a0a82aa9331ef$var$params","environmentIntensity","bounces","samplesPerFrame","resolutionScale","window","devicePixelRatio","tiles","autoPause","pause","continuous","$f06a0a82aa9331ef$var$setPause","v","action","paused","$f06a0a82aa9331ef$var$regenerateScene","$f06a0a82aa9331ef$var$loadModel","url","$7lx9d","GLTFLoader","setMeshoptDecoder","$kp7Te","MeshoptDecoder","loadAsync","then","gltf","scene","traverse","c","material","metalness","map","animations","mixer","AnimationMixer","clipAction","play","group","Group","add","floorTex","dim","data","Uint8Array","x","y","xCent","yCent","a","Math","max","min","sqrt","i","tex","DataTexture","format","RGBAFormat","type","UnsignedByteType","minFilter","LinearFilter","magFilter","wrapS","RepeatWrapping","wrapT","needsUpdate","$13343f7d1c4dd8ec$export$92750171fb06fc99","floorPlane","Mesh","PlaneBufferGeometry","MeshStandardMaterial","transparent","color","roughness","scale","setScalar","rotation","PI","position","sceneGenerator","$4CEV9","DynamicPathTracingSceneGenerator","$f06a0a82aa9331ef$var$onResize","w","innerWidth","h","innerHeight","dpr","setSize","reset","setPixelRatio","aspect","updateProjectionMatrix","result","generate","bvh","textures","materials","geometry","updateFrom","normalAttribute","attributes","normal","tangentAttribute","tangent","uvAttribute","uv","materialIndexAttribute","materialIndex","setTextures","$f06a0a82aa9331ef$var$animate","requestAnimationFrame","delta","getDelta","update","updateMatrixWorld","environmentBlur","l","samples","render","autoClear","innerText","floor","async","WebGLRenderer","antialias","toneMapping","ACESFilmicToneMapping","outputEncoding","sRGBEncoding","document","body","appendChild","domElement","Scene","PerspectiveCamera","set","PathTracingRenderer","camera","PhysicalPathTracingMaterial","filterGlossyFactor","setDefine","$RPVlj","FullScreenQuad","MeshBasicMaterial","target","texture","$5Rd1x","OrbitControls","lookAt","addEventListener","getElementById","Clock","envMapPromise","Promise","resolve","$891vQ","RGBELoader","load","generator","BlurredEnvMapGenerator","blurredTex","envMapInfo","dispose","background","environment","location","hash","remove","gui","$jiuw3","GUI","onChange","value","listen","$f06a0a82aa9331ef$var$init"],"version":3,"file":"skinnedMesh.49d8c0b2.js.map"}